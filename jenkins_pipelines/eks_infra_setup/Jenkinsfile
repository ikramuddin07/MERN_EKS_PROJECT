properties([
    parameters([
        string(
            defaultValue: 'dev',
            name: 'Environment'
        ),
        choice(
            choices: ['plan', 'apply', 'destroy'], 
            name: 'Terraform_Action'
        )])
])

pipeline {
    agent any

    stages {
        stage('Preparing') {
            steps {
                sh 'echo Preparing'
            }
        }

        stage('Git Pulling') {
            steps {
                git branch: 'master', url: 'https://github.com/ikramuddin07/MERN_EKS_PROJECT.git'
            }
        }

        stage('Terraform with Token') {
            steps {
                withCredentials([string(credentialsId: 'terraform-cloud-token', variable: 'TFC_TOKEN')]) {
                    withEnv(["TF_TOKEN_app_terraform_io=${TFC_TOKEN}"]) {
                        withAWS(credentials: 'aws_creds', region: 'us-east-1') {

                            // Init
                            sh 'terraform -chdir=eks_architecture/ init'

                            // Validate
                            sh 'terraform -chdir=eks_architecture/ validate'

                            // Plan / Apply / Destroy
                            script {
                                if (params.Terraform_Action == 'plan') {
                                    sh "terraform -chdir=eks_architecture/ plan -var-file=${params.Environment}.tfvars"
                                } else if (params.Terraform_Action == 'apply') {
                                    sh "terraform -chdir=eks_architecture/ apply -var-file=${params.Environment}.tfvars -auto-approve"
                                } else if (params.Terraform_Action == 'destroy') {
                                    sh "terraform -chdir=eks_architecture/ destroy -var-file=${params.Environment}.tfvars -auto-approve"
                                } else {
                                    error "Invalid value for Terraform_Action: ${params.Terraform_Action}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
